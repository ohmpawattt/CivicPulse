/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SecretBallotBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ballotCounter"
      | "ballots"
      | "createBallot"
      | "getActiveBallots"
      | "getBallotInfo"
      | "getEncryptedVoteCount"
      | "getEndedBallots"
      | "getResults"
      | "getTotalBallots"
      | "hasVoted"
      | "protocolId"
      | "setResults"
      | "vote"
      | "voteEncrypted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BallotCreated" | "ResultsRevealed" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ballotCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ballots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBallot",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBallots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBallotInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedVoteCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndedBallots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBallots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setResults",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteEncrypted",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ballotCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBallotInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndedBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setResults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteEncrypted",
    data: BytesLike
  ): Result;
}

export namespace BallotCreatedEvent {
  export type InputTuple = [
    ballotId: BigNumberish,
    title: string,
    creator: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    ballotId: bigint,
    title: string,
    creator: string,
    endTime: bigint
  ];
  export interface OutputObject {
    ballotId: bigint;
    title: string;
    creator: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsRevealedEvent {
  export type InputTuple = [ballotId: BigNumberish, results: BigNumberish[]];
  export type OutputTuple = [ballotId: bigint, results: bigint[]];
  export interface OutputObject {
    ballotId: bigint;
    results: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [ballotId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [ballotId: bigint, voter: string];
  export interface OutputObject {
    ballotId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecretBallotBox extends BaseContract {
  connect(runner?: ContractRunner | null): SecretBallotBox;
  waitForDeployment(): Promise<this>;

  interface: SecretBallotBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ballotCounter: TypedContractMethod<[], [bigint], "view">;

  ballots: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, string, bigint] & {
        title: string;
        endTime: bigint;
        isActive: boolean;
        resultsRevealed: boolean;
        creator: string;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  createBallot: TypedContractMethod<
    [title: string, candidates: string[], durationMinutes: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getActiveBallots: TypedContractMethod<[], [bigint[]], "view">;

  getBallotInfo: TypedContractMethod<
    [ballotId: BigNumberish],
    [
      [string, string[], bigint, boolean, boolean, string, bigint] & {
        title: string;
        candidates: string[];
        endTime: bigint;
        isActive: boolean;
        resultsRevealed: boolean;
        creator: string;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  getEncryptedVoteCount: TypedContractMethod<
    [ballotId: BigNumberish, candidateIndex: BigNumberish],
    [string],
    "view"
  >;

  getEndedBallots: TypedContractMethod<[], [bigint[]], "view">;

  getResults: TypedContractMethod<[ballotId: BigNumberish], [bigint[]], "view">;

  getTotalBallots: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [ballotId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  setResults: TypedContractMethod<
    [ballotId: BigNumberish, results: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [ballotId: BigNumberish, candidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteEncrypted: TypedContractMethod<
    [
      ballotId: BigNumberish,
      encryptedCandidateIndex: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ballotCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ballots"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, string, bigint] & {
        title: string;
        endTime: bigint;
        isActive: boolean;
        resultsRevealed: boolean;
        creator: string;
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBallot"
  ): TypedContractMethod<
    [title: string, candidates: string[], durationMinutes: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveBallots"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBallotInfo"
  ): TypedContractMethod<
    [ballotId: BigNumberish],
    [
      [string, string[], bigint, boolean, boolean, string, bigint] & {
        title: string;
        candidates: string[];
        endTime: bigint;
        isActive: boolean;
        resultsRevealed: boolean;
        creator: string;
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedVoteCount"
  ): TypedContractMethod<
    [ballotId: BigNumberish, candidateIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEndedBallots"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<[ballotId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalBallots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [ballotId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setResults"
  ): TypedContractMethod<
    [ballotId: BigNumberish, results: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [ballotId: BigNumberish, candidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteEncrypted"
  ): TypedContractMethod<
    [
      ballotId: BigNumberish,
      encryptedCandidateIndex: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BallotCreated"
  ): TypedContractEvent<
    BallotCreatedEvent.InputTuple,
    BallotCreatedEvent.OutputTuple,
    BallotCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsRevealed"
  ): TypedContractEvent<
    ResultsRevealedEvent.InputTuple,
    ResultsRevealedEvent.OutputTuple,
    ResultsRevealedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "BallotCreated(uint256,string,address,uint256)": TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;
    BallotCreated: TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;

    "ResultsRevealed(uint256,uint256[])": TypedContractEvent<
      ResultsRevealedEvent.InputTuple,
      ResultsRevealedEvent.OutputTuple,
      ResultsRevealedEvent.OutputObject
    >;
    ResultsRevealed: TypedContractEvent<
      ResultsRevealedEvent.InputTuple,
      ResultsRevealedEvent.OutputTuple,
      ResultsRevealedEvent.OutputObject
    >;

    "VoteCast(uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
